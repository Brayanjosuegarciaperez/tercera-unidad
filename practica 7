#include <SPI.h>			// incluye libreria bus SPI
#include <MFRC522.h>			// incluye libreria especifica para MFRC522
#include <Servo.h>
#include<stdio.h>
#include <Wire.h> 
#include <LiquidCrystal_I2C.h>
#define RST_PIN  9			// constante para referenciar pin de reset
#define SS_PIN  10			// constante para referenciar pin de slave select
int servo = 7;
Servo SEVOTOR;
#define OUTPINES(pin) pinMode(pin, OUTPUT);
#define WDIGITAL(pin, b) digitalWrite(pin, b);
int LED3 = 3;
int LED2 = 4;
int BUZZER = 6;
MFRC522 mfrc522(SS_PIN, RST_PIN);	// crea objeto mfrc522 enviando pines de slave select y reset
byte LecturaUID[4]; 				// crea array para almacenar el UID leido
byte Usuario1[4]= {0x90, 0x0E, 0xE4, 0xA4} ;    // UID de tarjeta leido en programa 1
byte Usuario2[4]= {0x83, 0x8C, 0x7E, 0xA6} ;    // UID de llavero leido en programa 1
LiquidCrystal_I2C lcd(0x27,16,2);  //
void setup() {
  Serial.begin(9600);			// inicializa comunicacion por monitor serie a 9600 bps
  SPI.begin();				// inicializa bus SPI
  mfrc522.PCD_Init();			// inicializa modulo lector
  Serial.println("Listo");		// Muestra texto Listo
  OUTPINES(LED3); 
  OUTPINES(LED2);
  OUTPINES(BUZZER);
  SEVOTOR.attach(7);
  OUTPINES(servo);
  lcd.init();
  lcd.backlight();
lcd.print("REGISTRO");
lcd.setCursor(0,1);
 delay(10);
}

void loop() {
  if ( ! mfrc522.PICC_IsNewCardPresent())		// si no hay una tarjeta presente
    return;						// retorna al loop esperando por una tarjeta
  
  if ( ! mfrc522.PICC_ReadCardSerial()) 		// si no puede obtener datos de la tarjeta
    return;						// retorna al loop esperando por otra tarjeta
    
    for (byte i = 0; i < mfrc522.uid.size; i++) {	// bucle recorre de a un byte por vez el UID
      if (mfrc522.uid.uidByte[i] < 0x10){		// si el byte leido es menor a 0x10
        Serial.print(" 0");				// imprime espacio en blanco y numero cero
        }
        else{						// sino
          Serial.print(" ");				// imprime un espacio en blanco
          }
          (mfrc522.uid.uidByte[i], HEX);   	// imprime el byte del UID leido en hexadecimal
          LecturaUID[i]=mfrc522.uid.uidByte[i];   	// almacena en array el byte del UID leido      
          }
          
          Serial.print("\t");   			// imprime un espacio de tabulacion             
                    
          if(comparaUID(LecturaUID, Usuario1))		// llama a funcion comparaUID con Usuario1
            Serial.println("Bienvenido Usuario 1");	// si retorna verdadero muestra texto bienvenida
          else if(comparaUID(LecturaUID, Usuario2))	// llama a funcion comparaUID con Usuario2
            Serial.println("Bienvenido Usuario 2");	// si retorna verdadero muestra texto bienvenida
           else						// si retorna falso
            Serial.println("Usuario no registrado"); 		// muestra texto equivalente a acceso denegado          
          if (LecturaUID == "Bienvenido Usuario 2")   //Si el dato que llega es 
                  mfrc522.PICC_HaltA();  		// detiene comunicacion con tarjeta   
            if(comparaUID(LecturaUID, Usuario2))		// llama a funcion comparaUID con Usuario1
           si();
          else 
          no();            
          if(comparaUID(LecturaUID, Usuario2))		// llama a funcion comparaUID con Usuario1
           MUSICA();
            if(comparaUID(LecturaUID, Usuario2))		// llama a funcion comparaUID con Usuario1
           SEVOTOR.write(90);
           else 
         SEVOTOR.write(180);
         if(comparaUID(LecturaUID, Usuario1))		// llama a funcion comparaUID con Usuario1
            si();	
       if(comparaUID(LecturaUID, Usuario1))		// llama a funcion comparaUID con Usuario1
           SEVOTOR.write(90);
           else 
         SEVOTOR.write(180);     
         
}

boolean comparaUID(byte lectura[],byte usuario[])	// funcion comparaUID
{
  for (byte i=0; i < mfrc522.uid.size; i++){		// bucle recorre de a un byte por vez el UID
  if(lectura[i] != usuario[i])				// si byte de UID leido es distinto a usuario
    return(false);					// retorna falso
  }
  return(true);						// si los 4 bytes coinciden retorna verdadero
}
void si(){
        WDIGITAL(LED3,HIGH);	// si retorna ver
        delay (100);
        WDIGITAL(LED3,LOW);
        delay (100);
        WDIGITAL(LED3,HIGH);	// si retorna ver
        delay (100);
        WDIGITAL(LED3,LOW);
        delay (100);
        lcd.setCursor(0,1);
         lcd.print("coinside ");
         delay(10);
 
}
void no(){
        WDIGITAL(LED2,HIGH);	// si retorna ver
        delay (1000);
        WDIGITAL(LED2,LOW);
        delay (100);
        WDIGITAL(LED2,HIGH);	// si retorna ver
        delay (100);
        WDIGITAL(LED2,LOW);
        delay (100);
         lcd.setCursor(0,1);
         lcd.print("intruso");
         delay(100);

}
void MUSICA (){  
  WDIGITAL (BUZZER,HIGH); 
  delay(100);

}
